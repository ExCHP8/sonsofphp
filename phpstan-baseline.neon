parameters:
	ignoreErrors:
		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\ConfigCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/ConfigCommand.php

		-
			message: "#^Class RuntimeException referenced with incorrect case\\: RunTimeException\\.$#"
			count: 1
			path: packages/bard/src/Command/InitCommand.php

		-
			message: "#^Class RuntimeException referenced with incorrect case\\: RunTimeException\\.$#"
			count: 1
			path: packages/bard/src/Command/InstallCommand.php

		-
			message: "#^Class RuntimeException referenced with incorrect case\\: RunTimeException\\.$#"
			count: 2
			path: packages/bard/src/Command/MergeCommand.php

		-
			message: "#^Class RuntimeException referenced with incorrect case\\: RunTimeException\\.$#"
			count: 1
			path: packages/bard/src/Command/ReleaseCommand.php

		-
			message: "#^Only booleans are allowed in an if condition, mixed given\\.$#"
			count: 2
			path: packages/bard/src/Command/ReleaseCommand.php

		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\ReleaseMajorCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/ReleaseMajorCommand.php

		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\ReleaseMinorCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/ReleaseMinorCommand.php

		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\ReleasePatchCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/ReleasePatchCommand.php

		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\RunCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/RunCommand.php

		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\SplitCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/SplitCommand.php

		-
			message: "#^Class RuntimeException referenced with incorrect case\\: RunTimeException\\.$#"
			count: 1
			path: packages/bard/src/Command/UpdateCommand.php

		-
			message: "#^Property SonsOfPHP\\\\Bard\\\\Command\\\\ValidateCommand\\:\\:\\$json is never read, only written\\.$#"
			count: 1
			path: packages/bard/src/Command/ValidateCommand.php

		-
			message: "#^Parameter \\#2 \\.\\.\\.\\$values of function sprintf expects bool\\|float\\|int\\|string\\|null, SonsOfPHP\\\\Component\\\\Clock\\\\DateInterface given\\.$#"
			count: 1
			path: packages/clock/DateTime.php

		-
			message: "#^Parameter \\#3 \\.\\.\\.\\$values of function sprintf expects bool\\|float\\|int\\|string\\|null, SonsOfPHP\\\\Component\\\\Clock\\\\TimeInterface given\\.$#"
			count: 1
			path: packages/clock/DateTime.php

		-
			message: "#^Parameter \\#4 \\.\\.\\.\\$values of function sprintf expects bool\\|float\\|int\\|string\\|null, SonsOfPHP\\\\Component\\\\Clock\\\\ZoneOffsetInterface given\\.$#"
			count: 1
			path: packages/clock/DateTime.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\DateInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\Date will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/DateTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\DateTimeInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\DateTime will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/DateTimeTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\ClockInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\FixedClock will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/FixedClockTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\ClockInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\SystemClock will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/SystemClockTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\TimeInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\Time will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/TimeTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\YearInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\Year will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/YearTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\ZoneOffsetInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\ZoneOffset will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/ZoneOffsetTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Clock\\\\\\\\ZoneInterface' and SonsOfPHP\\\\Component\\\\Clock\\\\Zone will always evaluate to true\\.$#"
			count: 1
			path: packages/clock/Tests/ZoneTest.php

		-
			message: "#^Property SonsOfPHP\\\\Component\\\\Clock\\\\Zone\\:\\:\\$offset \\(SonsOfPHP\\\\Component\\\\Clock\\\\ZoneOffset\\) does not accept SonsOfPHP\\\\Component\\\\Clock\\\\ZoneOffsetInterface\\.$#"
			count: 1
			path: packages/clock/Zone.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'Psr\\\\\\\\EventDispatcher\\\\\\\\EventDispatcherInterface' and SonsOfPHP\\\\Component\\\\EventDispatcher\\\\EventDispatcher will always evaluate to true\\.$#"
			count: 1
			path: packages/event-dispatcher/Tests/EventDispatcherTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'Psr\\\\\\\\EventDispatcher\\\\\\\\ListenerProviderInterface' and SonsOfPHP\\\\Component\\\\EventDispatcher\\\\ListenerProvider will always evaluate to true\\.$#"
			count: 1
			path: packages/event-dispatcher/Tests/ListenerProviderTest.php

		-
			message: "#^Casting to string something that's already string\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/AggregateId.php

		-
			message: "#^Unsafe usage of new static\\(\\)\\.$#"
			count: 3
			path: packages/event-sourcing/Aggregate/AggregateId.php

		-
			message: "#^Method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateInterface\\:\\:getPendingEvents\\(\\) has invalid return type SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\DomainEventInterface\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/AggregateInterface.php

		-
			message: "#^PHPDoc tag @param for parameter \\$events with type array\\<SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\MessageInterface\\> is incompatible with native type Generator\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/AggregateInterface.php

		-
			message: "#^Parameter \\$events of method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateInterface\\:\\:buildFromEvents\\(\\) has invalid type SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\MessageInterface\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/AggregateInterface.php

		-
			message: "#^Method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateVersion\\:\\:isValid\\(\\) should return true but returns bool\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/AggregateVersion.php

		-
			message: "#^Negated boolean expression is always false\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/AggregateVersion.php

		-
			message: "#^Parameter \\#1 \\$message of method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\Enricher\\\\MessageEnricherInterface\\:\\:enrich\\(\\) expects SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\MessageInterface, SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\DomainEventInterface given\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/Repository/AggregateRepository.php

		-
			message: "#^Unreachable statement \\- code above always terminates\\.$#"
			count: 1
			path: packages/event-sourcing/Aggregate/Repository/AggregateRepository.php

		-
			message: "#^Return type \\(void\\) of method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Bridge\\\\Symfony\\\\EventMessageBus\\:\\:dispatch\\(\\) should be compatible with return type \\(object\\) of method Psr\\\\EventDispatcher\\\\EventDispatcherInterface\\:\\:dispatch\\(\\)$#"
			count: 1
			path: packages/event-sourcing/Bridge/Symfony/EventMessageBus.php

		-
			message: "#^Call to an undefined method Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface\\:\\:getUserIdentifier\\(\\)\\.$#"
			count: 1
			path: packages/event-sourcing/Bridge/Symfony/MessageEnricherHandler/BlameableEnricher.php

		-
			message: "#^Method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\AbstractGenericMessage\\:\\:deserialize\\(\\) should return static\\(SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\AbstractGenericMessage\\) but returns SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\MessageInterface\\.$#"
			count: 1
			path: packages/event-sourcing/Message/AbstractGenericMessage.php

		-
			message: "#^PHPDoc tag @param has invalid value \\(MessageInterface\\|string\\)\\: Unexpected token \"\\\\n     \\*\", expected variable at offset 94$#"
			count: 1
			path: packages/event-sourcing/Message/MessageProviderInterface.php

		-
			message: "#^Only booleans are allowed in an if condition, SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateVersionInterface\\|null given\\.$#"
			count: 1
			path: packages/event-sourcing/Message/Repository/DoctrineDbalMessageRepository.php

		-
			message: "#^Parameter \\#1 \\$message of method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\Serializer\\\\MessageSerializerInterface\\:\\:serialize\\(\\) expects SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\SerializableMessageInterface, SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\MessageInterface given\\.$#"
			count: 1
			path: packages/event-sourcing/Message/Repository/DoctrineDbalMessageRepository.php

		-
			message: "#^Only booleans are allowed in &&, SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateVersionInterface\\|null given on the left side\\.$#"
			count: 1
			path: packages/event-sourcing/Message/Repository/InMemoryMessageRepository.php

		-
			message: "#^PHPDoc tag @throws with type SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\Serializer\\\\EventSourcingException is not subtype of Throwable$#"
			count: 2
			path: packages/event-sourcing/Message/Serializer/MessageSerializerInterface.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Aggregate\\\\\\\\AggregateIdInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateId will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Aggregate/AggregateIdTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Aggregate\\\\\\\\AggregateIdInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateIdInterface will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Aggregate/AggregateIdTest.php

		-
			message: "#^Call to an undefined static method PHPUnit\\\\Framework\\\\MockObject\\\\MockObject\\:\\:new\\(\\)\\.$#"
			count: 3
			path: packages/event-sourcing/Tests/Aggregate/AggregateTraitTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Aggregate\\\\\\\\AggregateVersionInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\AggregateVersionInterface will always evaluate to true\\.$#"
			count: 2
			path: packages/event-sourcing/Tests/Aggregate/AggregateVersionTest.php

		-
			message: "#^Call to an undefined method Psr\\\\EventDispatcher\\\\EventDispatcherInterface\\:\\:expects\\(\\)\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Aggregate/Repository/AggregateRepositoryTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Aggregate\\\\\\\\Repository\\\\\\\\AggregateRepositoryInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\Repository\\\\AggregateRepository will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Aggregate/Repository/AggregateRepositoryTest.php

		-
			message: "#^Method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Tests\\\\FakeAggregate\\:\\:getPendingEvents\\(\\) has invalid return type SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\DomainEventInterface\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/FakeAggregate.php

		-
			message: "#^Parameter \\$events of method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Tests\\\\FakeAggregate\\:\\:buildFromEvents\\(\\) has invalid type SonsOfPHP\\\\Component\\\\EventSourcing\\\\Aggregate\\\\MessageInterface\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/FakeAggregate.php

		-
			message: "#^Unsafe usage of new static\\(\\)\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/FakeAggregate.php

		-
			message: "#^Variable method call on \\$this\\(SonsOfPHP\\\\Component\\\\EventSourcing\\\\Tests\\\\FakeAggregate\\)\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/FakeAggregate.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\MessageInterface\\:\\:getPayload\\(\\)\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/AbstractGenericMessageTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\MessageInterface' and PHPUnit\\\\Framework\\\\MockObject\\\\MockObject&SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\AbstractGenericMessage will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/AbstractGenericMessageTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\SerializableMessageInterface' and PHPUnit\\\\Framework\\\\MockObject\\\\MockObject&SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\AbstractGenericMessage will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/AbstractGenericMessageTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertIsArray\\(\\) with array will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/AbstractGenericMessageTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\MessageInterface' and PHPUnit\\\\Framework\\\\MockObject\\\\MockObject&SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\AbstractMessage will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/AbstractMessageTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertIsArray\\(\\) with array will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/AbstractMessageTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\Enricher\\\\\\\\Provider\\\\\\\\MessageEnricherProviderInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\Enricher\\\\Provider\\\\AllMessageEnricherProvider will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/Enricher/Provider/AllMessageEnricherProviderTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\Repository\\\\\\\\MessageRepositoryInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\Repository\\\\InMemoryMessageRepository will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/Repository/InMemoryMessageRepositoryTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\SerializableMessageInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\SerializableMessageInterface will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/Serializer/MessageSerializerTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Message\\\\\\\\Serializer\\\\\\\\MessageSerializerInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Message\\\\Serializer\\\\MessageSerializer will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Message/Serializer/MessageSerializerTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Snapshot\\\\\\\\Repository\\\\\\\\SnapshotRepositoryInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Snapshot\\\\Repository\\\\InMemorySnapshotRepository will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Snapshot/Repository/InMemorySnapshotRepositoryTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\EventSourcing\\\\\\\\Snapshot\\\\\\\\SnapshotInterface' and SonsOfPHP\\\\Component\\\\EventSourcing\\\\Snapshot\\\\Snapshot will always evaluate to true\\.$#"
			count: 1
			path: packages/event-sourcing/Tests/Snapshot/SnapshotTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\FeatureToggle\\\\\\\\ActivationStrategy\\\\\\\\ActivationStrategyInterface' and SonsOfPHP\\\\Component\\\\FeatureToggle\\\\ActivationStrategy\\\\AlwaysDisabledStrategy will always evaluate to true\\.$#"
			count: 1
			path: packages/feature-toggle/Tests/ActivationStrategy/AlwaysDisabledStrategyTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\FeatureToggle\\\\\\\\ActivationStrategy\\\\\\\\ActivationStrategyInterface' and SonsOfPHP\\\\Component\\\\FeatureToggle\\\\ActivationStrategy\\\\AlwaysEnabledStrategy will always evaluate to true\\.$#"
			count: 1
			path: packages/feature-toggle/Tests/ActivationStrategy/AlwaysEnabledStrategyTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\FeatureToggle\\\\\\\\FeatureToggleInterface' and SonsOfPHP\\\\Component\\\\FeatureToggle\\\\FeatureToggle will always evaluate to true\\.$#"
			count: 1
			path: packages/feature-toggle/Tests/FeatureToggleTest.php

		-
			message: "#^Constant JSON_HEX_QUOTE not found\\.$#"
			count: 1
			path: packages/json/JsonEncoder.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertIsString\\(\\) with string will always evaluate to true\\.$#"
			count: 1
			path: packages/json/Tests/JsonEncoderTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Json\\\\\\\\JsonDecoder' and SonsOfPHP\\\\Component\\\\Json\\\\JsonDecoder will always evaluate to true\\.$#"
			count: 1
			path: packages/json/Tests/JsonTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Json\\\\\\\\JsonEncoder' and SonsOfPHP\\\\Component\\\\Json\\\\JsonEncoder will always evaluate to true\\.$#"
			count: 1
			path: packages/json/Tests/JsonTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertIsString\\(\\) with string will always evaluate to true\\.$#"
			count: 1
			path: packages/json/Tests/JsonTest.php

		-
			message: "#^Method SonsOfPHP\\\\Component\\\\Money\\\\Money\\:\\:with\\(\\) should return SonsOfPHP\\\\Component\\\\Money\\\\Money but returns SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\.$#"
			count: 1
			path: packages/money/Money.php

		-
			message: "#^PHPDoc tag @param references unknown parameter\\: \\$that$#"
			count: 1
			path: packages/money/Money.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Operator/AddMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 3
			path: packages/money/Operator/AddMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 1
			path: packages/money/Operator/DivideMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 1
			path: packages/money/Operator/DivideMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 1
			path: packages/money/Operator/MultiplyMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 1
			path: packages/money/Operator/MultiplyMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Operator/SubtractMoneyOperator.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 3
			path: packages/money/Operator/SubtractMoneyOperator.php

		-
			message: "#^PHPDoc tag @param for parameter \\$provider with type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyProviderInterface is not subtype of native type SonsOfPHP\\\\Component\\\\Money\\\\CurrencyProviderInterface\\.$#"
			count: 1
			path: packages/money/Query/CurrencyProviderQueryInterface.php

		-
			message: "#^Parameter \\$provider of method SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrencyProviderQueryInterface\\:\\:queryFrom\\(\\) has invalid type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyProviderInterface\\.$#"
			count: 1
			path: packages/money/Query/CurrencyProviderQueryInterface.php

		-
			message: "#^PHPDoc tag @param for parameter \\$currency with type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyInterface is not subtype of native type SonsOfPHP\\\\Component\\\\Money\\\\CurrencyInterface\\.$#"
			count: 1
			path: packages/money/Query/CurrencyQueryInterface.php

		-
			message: "#^Parameter \\$currency of method SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrencyQueryInterface\\:\\:queryFrom\\(\\) has invalid type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyInterface\\.$#"
			count: 1
			path: packages/money/Query/CurrencyQueryInterface.php

		-
			message: "#^Parameter \\$provider of method SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\GetCurrencyQuery\\:\\:queryFrom\\(\\) has invalid type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyProviderInterface\\.$#"
			count: 1
			path: packages/money/Query/GetCurrencyQuery.php

		-
			message: "#^Parameter \\$provider of method SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\HasCurrencyQuery\\:\\:queryFrom\\(\\) has invalid type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyProviderInterface\\.$#"
			count: 1
			path: packages/money/Query/HasCurrencyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\CurrencyInterface\\:\\:getCurrencyCode\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsEqualToCurrencyQuery.php

		-
			message: "#^Parameter \\$currency of method SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\IsEqualToCurrencyQuery\\:\\:queryFrom\\(\\) has invalid type SonsOfPHP\\\\Component\\\\Money\\\\Query\\\\CurrecnyInterface\\.$#"
			count: 1
			path: packages/money/Query/IsEqualToCurrencyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsEqualToMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsEqualToMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsGreaterThanMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsGreaterThanMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsGreaterThanOrEqualToMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsGreaterThanOrEqualToMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsLessThanMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsLessThanMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsLessThanOrEqualToMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getCurrency\\(\\)\\.$#"
			count: 2
			path: packages/money/Query/IsLessThanOrEqualToMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 1
			path: packages/money/Query/IsNegativeMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 1
			path: packages/money/Query/IsPositiveMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 1
			path: packages/money/Query/IsZeroMoneyQuery.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\CurrencyInterface\\:\\:getCurrencyCode\\(\\)\\.$#"
			count: 1
			path: packages/money/Tests/CurrencyProviderTest.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\CurrencyInterface\\:\\:getMinorUnit\\(\\)\\.$#"
			count: 3
			path: packages/money/Tests/CurrencyProviderTest.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\CurrencyInterface\\:\\:getNumericCode\\(\\)\\.$#"
			count: 3
			path: packages/money/Tests/CurrencyProviderTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Money\\\\\\\\CurrencyProviderInterface' and SonsOfPHP\\\\Component\\\\Money\\\\CurrencyProvider will always evaluate to true\\.$#"
			count: 1
			path: packages/money/Tests/CurrencyProviderTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Money\\\\\\\\CurrencyInterface' and SonsOfPHP\\\\Component\\\\Money\\\\Currency will always evaluate to true\\.$#"
			count: 1
			path: packages/money/Tests/CurrencyTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Money\\\\\\\\MoneyInterface' and SonsOfPHP\\\\Component\\\\Money\\\\Money will always evaluate to true\\.$#"
			count: 1
			path: packages/money/Tests/MoneyTest.php

		-
			message: "#^Call to an undefined method SonsOfPHP\\\\Component\\\\Money\\\\MoneyInterface\\:\\:getAmount\\(\\)\\.$#"
			count: 1
			path: packages/money/Tests/Operator/AddMoneyOperatorTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Money\\\\\\\\Operator\\\\\\\\MoneyOperatorInterface' and SonsOfPHP\\\\Component\\\\Money\\\\Operator\\\\AddMoneyOperator will always evaluate to true\\.$#"
			count: 1
			path: packages/money/Tests/Operator/AddMoneyOperatorTest.php

		-
			message: "#^Call to method PHPUnit\\\\Framework\\\\Assert\\:\\:assertInstanceOf\\(\\) with 'SonsOfPHP\\\\\\\\Component\\\\\\\\Version\\\\\\\\VersionInterface' and SonsOfPHP\\\\Component\\\\Version\\\\Version will always evaluate to true\\.$#"
			count: 2
			path: packages/version/Tests/VersionTest.php

		-
			message: "#^Only booleans are allowed in an if condition, string\\|null given\\.$#"
			count: 2
			path: packages/version/Version.php
